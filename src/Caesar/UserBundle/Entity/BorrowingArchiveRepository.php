<?php

namespace Caesar\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * BorrowingArchiveRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BorrowingArchiveRepository extends EntityRepository {

  public function getArchivedBorrowingsFromToSortBy($page, $sort, $direction, $user = null, $resource = null) {
    $nb_per_page = 10;
    $min = ($page - 1) * $nb_per_page;
    $qb = $this->createQueryBuilder('b');
    if ($user != null) {
      $qb->where('b.user = :user');
      $qb->setParameter("user", $user->getId());
      if ($resource != null) {
        $qb->andWhere('b.resource = :resource');
        $qb->setParameter("resource", $resource->getId());
      }
    }

    if ($resource != null) {
      $qb->where('b.resource = :resource');
      $qb->setParameter("resource", $resource->getId());
    }
    $qb->orderBy('b.' . $sort, $direction)
      ->setFirstResult($min)
      ->setMaxResults($nb_per_page);
    return $qb->getQuery()->getResult();
  }

  public function count($user = null, $resource = null) {
    $qb = $this->createQueryBuilder('b');
    $qb->select('count(b.id)');

    if ($user != null) {
      $qb->where('b.user = :user');
      $qb->setParameter("user", $user->getId());
      if ($resource != null) {
        $qb->andWhere('b.resource = :resource');
        $qb->setParameter("resource", $resource->getId());
      }
    }

    if ($resource != null) {
      $qb->where('b.resource = :resource');
      $qb->setParameter("resource", $resource->getId());
    }

    return $qb->getQuery()->getSingleScalarResult();
  }

}
